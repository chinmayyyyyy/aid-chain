generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int       @id @default(autoincrement())
  username      String
  email         String    @unique
  password      String
  role          String    @default("Donor") @db.VarChar(20) // Roles: Donor, NGO, Admin
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  NGOPosts      NGOPost[]
  Donations     Donation[]
  Notifications Notification[]
  DonationHistories DonationHistory[]
}

model NGOPost {
  post_id                 Int       @id @default(autoincrement())
  ngo_id                  Int       // Reference to the NGO user
  title                   String
  item_details            String    // JSON or structured text for requested items
  reason                  String    // Why the donation is needed
  address                 String    // NGO address for sending donations
  packaging_instructions  String?   // Optional instructions for donors
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  status                  String    @default("Active") @db.VarChar(20) // Active, Fulfilled, or Closed
  emergency               Boolean?  @default(false)
  NGO                     User      @relation(fields: [ngo_id], references: [user_id])
  Donations               Donation[]
}

model Donation {
  donation_id     Int       @id @default(autoincrement())
  donor_id        Int       // Reference to the donor user
  post_id         Int       // Reference to the NGOPost
  courier_number  String?   // Courier tracking number provided by the donor
  amount          Float?    // Optional monetary donation
  status          String    @default("Pending") @db.VarChar(20) // Pending, Confirmed, Delivered
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  Donor           User      @relation(fields: [donor_id], references: [user_id])
  NGOPost         NGOPost   @relation(fields: [post_id], references: [post_id])
  DonationHistories DonationHistory[]
}

model Notification {
  notification_id Int       @id @default(autoincrement())
  user_id         Int       // Reference to the user
  message         String    // Notification message
  is_read         Boolean   @default(false)
  created_at      DateTime  @default(now())

  User            User      @relation(fields: [user_id], references: [user_id])
}

model DonationHistory {
  history_id      Int       @id @default(autoincrement())
  donation_id     Int       // Reference to the donation
  donor_id        Int       // Reference to the donor
  created_at      DateTime  @default(now())

  Donation        Donation  @relation(fields: [donation_id], references: [donation_id])
  Donor           User      @relation(fields: [donor_id], references: [user_id])
}
